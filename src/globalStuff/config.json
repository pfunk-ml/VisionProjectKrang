// Configuration File
//
// This file is used by camProcess and camCentralProcessMain
// 

// ### Adding new object to the scene ###
// Make changes to: num_object, object_name, marker_id, T_sprite

// These are configuration parametes that are used by camera processes and central process.
{
	// Number of cameras used
	"num_cameras" : 6,
	
	// Number of tags
	"num_object" : 5,
	
	// Object names. The pose data for markers is sent in same order on the
    // ACH channel
    // first should always be "robot"
	"object_name" : ["robot", "table", "chair1", "chair2", "sqTable"],
	
	// Marker IDs (in same order as object names)
    // first one should always be marker id of robot (krang)
	"marker_id" : [2, 6, 5, 3, 4],

    // Length of edge of AR marker in cms
	"marker_size" : 20.32,

    // Set resolution in pixels. Some of possible values are 640x480, 960x720 
    // and others.
    "width" : 640,
    "height" : 480,

	// Calibration files for camera processes
	"cam_calib_name" : ["Data/camCalib0.xml",
	                    "Data/camCalib1.xml",
	                    "Data/camCalib2.xml",
	                    "Data/camCalib3.xml",
                        "Data/camCalib4.xml",
                        "Data/camCalib5.xml"],

	// Camera channel names for camera processes to publish data
	"cam_channel_name" : ["cam0_channel",  // CAM ID 0
	                      "cam1_channel",  // CAM ID 1
	                      "cam2_channel",  // CAM ID 2
	                      "cam3_channel",  // CAM ID 3
                          "cam4_channel",  // CAM ID 4
                          "cam5_channel"], // CAM ID 5

	// Perception channel name
	// "perception_channel" : "krang_vision",
    "vision_obj_poses_channel" : "vision_obj_poses",
    "vision_krang_pose_channel" : "vision_krang_pose",

	
	// Debug channel name
	"debug_channel" : "debug_channel",

// Global to camera transformation matrices
// x, y, z in last columns are in cms.
"T_global2cam" : // i.e T_cam_global
[
   [   // camera 0
       [0.997015, -0.004999, -0.077039, 104.175877] ,
       [0.017577, -0.956994, 0.289575, 192.598869] ,
       [-0.075174, -0.290064, -0.954049, 266.315598] ,
       [0.000000, 0.000000, 0.000000, 1.000000] 
   ],
   [   // camera 1
       [0.996937, 0.064894, 0.043645, -115.449700] ,
       [0.053911, -0.974550, 0.217596, 211.357805] ,
       [0.056655, -0.214576, -0.975062, 255.041549] ,
       [0.000000, 0.000000, 0.000000, 1.000000] 
   ],
   [   // camera 2
       [0.995376, 0.023142, -0.093224, 102.645000] ,
       [0.014535, -0.995656, -0.091964, 74.684100] ,
       [-0.094948, 0.090184, -0.991389, 176.096000] ,
       [0.000000, 0.000000, 0.000000, 1.000000] 
   ],
   [   // camera 3
       [0.994247, 0.005694, 0.106962, -95.982300] ,
       [0.014808, -0.996304, -0.084607, 60.127900] ,
       [0.106085, 0.085704, -0.990657, 184.245000] ,
       [0.000000, 0.000000, 0.000000, 1.000000] 
   ],
   [   // camera 4
       [0.999228, 0.017619, 0.035106, 88.145500] ,
       [0.032218, -0.878884, -0.475947, -49.594700] ,
       [0.022468, 0.476710, -0.878773, 233.719000] ,
       [0.000000, 0.000000, 0.000000, 1.000000] 
   ],
   [   // camera 5
       [0.997170, 0.074854, 0.007020, -81.559500] ,
       [0.071769, -0.919927, -0.385466, -74.472000] ,
       [-0.022395, 0.384879, -0.922695, 231.788000] ,
       [0.000000, 0.000000, 0.000000, 1.000000] 
   ]
],



    /* World Customization */

    // Transform from world origin to global origin (pose of global frame 
    // origin relative to world origin). The global origin corresponds to pose
    // of global marker used during extrinsic camera calibration. This is used to 
    // transform marker poses reported by each camera to pose in world frame.
    // x, y, z in last column are in meters.
    "T_global2world" : 
    [
        [1, 0, 0, 2.6416],
        [0, 1, 0, 3.1386],
        [0, 0, 1, 0],
        [0, 0, 0, 1]
    ],

	// Pose of object in the marker frame. Once the markers are fixed to the
    // object, these matrices need to be configured. These are used to get 
    // object pose from marker pose. Object frame is defined by 2D object model
    // used in the simulator.
    // x, y, z in last column are in meters.
    "T_sprite" : 
    [
	    [ 
          [1, 0, 0, 0.18],  
	        [0, 1, 0, -0.02],
	        [0, 0, 1, 0],
	        [0, 0, 0, 1] 
      ],	// Robot
	    [ 
          [0, -1, 0, 0.30],  
	        [1, 0, 0, -0.91],
	        [0, 0, 1, 0],
	        [0, 0, 0, 1] 
      ],	// Table
	    [ 
          [0, -1, 0, 0.3],  // [0, -1, 0, 0.50] <-- bubble-back boomdp model
	        [1, 0, 0, -0.24],  // [1, 0, 0, -0.25] <-- bubble-back boomdp model
	        [0, 0, 1, 0],
	        [0, 0, 0, 1] 
      ],	// Chair
      [ 
          [0, -1, 0, 0.3],  // [0, -1, 0, 0.50] <-- bubble-back boomdp model
	        [1, 0, 0, -0.24],  // [1, 0, 0, -0.25] <-- bubble-back boomdp model
          [0, 0, 1, 0],
          [0, 0, 0, 1] 
      ],   // Chair
      [ 
          [0, -1, 0, 0.43],  
          [1, 0, 0, -0.43],
          [0, 0, 1, 0],
          [0, 0, 0, 1] 
      ]  // sqTable
    ]
}
