// Configuration File
//
// This file is used by camProcess and camCentralProcessMain
// 

// ### Adding new object to the scene ###
// Make changes to: num_object, object_name, marker_id, T_sprite

// These are configuration parametes that are used by camera processes and central process.
{
	// Number of cameras used
	"num_cameras" : 6,
	
	// Number of tags
	"num_objects" : 5,
	
	// Object names. The pose data for markers is sent in same order on the
    // ACH channel
    // first should always be "robot"
	"object_name" : ["robot", "table", "chair1", "chair2", "sqTable"],
	
	// Marker IDs (in same order as object names)
    // first one should always be marker id of robot (krang)
	"marker_id" : [2, 6, 5, 3, 4],

    // Length of edge of AR marker in cms
	//"marker_size" : 20.32,
  "marker_size" : 19.95,

    // Set resolution in pixels. Some of possible values are 640x480, 960x720 
    // and others.
    "width" : 640,
    "height" : 480,

	// Calibration files for camera processes
	"cam_calib_name" : ["Data/camCalib0.xml",
	                    "Data/camCalib1.xml",
	                    "Data/camCalib2.xml",
	                    "Data/camCalib3.xml",
                      "Data/camCalib4.xml",
                      "Data/camCalib5.xml"],

	// Camera channel names for camera processes to publish data
	"cam_channel_name" : ["cam0_channel",  // CAM ID 0
	                      "cam1_channel",  // CAM ID 1
	                      "cam2_channel",  // CAM ID 2
	                      "cam3_channel",  // CAM ID 3
                        "cam4_channel",  // CAM ID 4
                        "cam5_channel"], // CAM ID 5

	// Perception channel name
	// "perception_channel" : "krang_vision",
    "vision_obj_poses_channel" : "vision_obj_poses",
    "vision_krang_pose_channel" : "vision_krang_pose",

	
	// Debug channel name
	"debug_channel" : "debug_channel",

// Global to camera transformation matrices
// x, y, z in last columns are in cms.
"T_global2cam" : // i.e T_cam_global
[
   [   // camera 0
       [0.998298, -0.017512, -0.055634, 92.162076] ,
       [-0.000394, -0.955863, 0.293813, 179.957181] ,
       [-0.058324, -0.293291, -0.954242, 250.715935] ,
       [0.000000, 0.000000, 0.000000, 1.000000] 
   ],
   [   // camera 1
       [0.998252, 0.022422, 0.054677, -78.640299] ,
       [0.007007, -0.963607, 0.267230, 189.646926] ,
       [0.058679, -0.266381, -0.962080, 253.034971] ,
       [0.000000, 0.000000, 0.000000, 1.000000] 
   ],
   [   // camera 2
       [0.997080, 0.018031, -0.074204, 88.968400] ,
       [0.011679, -0.996299, -0.085163, 62.233800] ,
       [-0.075465, 0.084047, -0.993600, 167.716000] ,
       [0.000000, 0.000000, 0.000000, 1.000000] 
   ],
   [   // camera 3
       [0.997455, -0.005894, 0.071053, -70.876000] ,
       [0.001837, -0.994122, -0.108249, 60.935000] ,
       [0.071274, 0.108104, -0.991581, 175.203000] ,
       [0.000000, 0.000000, 0.000000, 1.000000] 
   ],
   [   // camera 4
       [0.999859, 0.009659, 0.013767, 79.403400] ,
       [0.014833, -0.892306, -0.451188, -56.920300] ,
       [0.007926, 0.451328, -0.892323, 236.274000] ,
       [0.000000, 0.000000, 0.000000, 1.000000] 
   ],
   [   // camera 5
       [0.999900, 0.011795, -0.007806, -66.263600] ,
       [0.008213, -0.933480, -0.358536, -80.843000] ,
       [-0.011515, 0.358436, -0.933483, 226.584000] ,
       [0.000000, 0.000000, 0.000000, 1.000000] 
   ]
],

    /* World Customization */

    // Transform from world origin to global origin (pose of global frame 
    // origin relative to world origin). The global origin corresponds to pose
    // of global marker used during extrinsic camera calibration. This is used to 
    // transform marker poses reported by each camera to pose in world frame.
    // x, y, z in last column are in meters.
    "T_global2world" : 
    [
        [1, 0, 0, 2.695],
        [0, 1, 0, 3.2425],
        [0, 0, 1, 0],
        [0, 0, 0, 1]
    ],

	// Pose of object in the marker frame. Once the markers are fixed to the
    // object, these matrices need to be configured. These are used to get 
    // object pose from marker pose. Object frame is defined by 2D object model
    // used in the simulator.
    // x, y, z in last column are in meters.
    "T_sprite" : 
    [
	    [ 
          [1, 0, 0, 0.18],  
	        [0, 1, 0, -0.02],
	        [0, 0, 1, 0],
	        [0, 0, 0, 1] 
      ],	// Robot
	    [ 
          [0, -1, 0, 0.30],  
	        [1, 0, 0, -0.91],
	        [0, 0, 1, 0],
	        [0, 0, 0, 1] 
      ],	// Table
	    [ 
          [0, -1, 0, 0.3],  // [0, -1, 0, 0.50] <-- bubble-back boomdp model
	        [1, 0, 0, -0.24],  // [1, 0, 0, -0.25] <-- bubble-back boomdp model
	        [0, 0, 1, 0],
	        [0, 0, 0, 1] 
      ],	// Chair
      [ 
          [0, -1, 0, 0.3],  // [0, -1, 0, 0.50] <-- bubble-back boomdp model
	        [1, 0, 0, -0.24],  // [1, 0, 0, -0.25] <-- bubble-back boomdp model
          [0, 0, 1, 0],
          [0, 0, 0, 1] 
      ],   // Chair
      [ 
          [0, -1, 0, 0.43],  
          [1, 0, 0, -0.43],
          [0, 0, 1, 0],
          [0, 0, 0, 1] 
      ]  // sqTable
    ]
}
